# This file was *autogenerated* from the file build_cyclic_class_codex.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_28 = Integer(28); _sage_const_10 = Integer(10)
for n in range(_sage_const_3 ,_sage_const_28 ):
	if n < _sage_const_10 :
		G = 'Z0' + str(n)
	else:
		G = 'Z' + str(n)
	f = open(G)
	lines = f.readlines()
	f.close()
	L = [lines.index(line) for line in lines if line[_sage_const_0 ] == '[']
	M = [lines[i + _sage_const_1 ] for i in L]

	codex = [_sage_const_0 ]
	for i in range(n-_sage_const_1 ):
		codex.append(-_sage_const_1 )

	digits = [str(i) for i in range(_sage_const_10 )]

	for i in range(n):
		try:
			j = M[i].index(',')
		except ValueError:
			# Only happens when i is 0
			continue
		if i == _sage_const_0 :
			continue
		the_line = M[i][j+_sage_const_2 :]
		k = _sage_const_0 
		while the_line[k] in digits:
			k += _sage_const_1 
		the_num = eval(the_line[:k]) - _sage_const_1 
		codex[the_num] = i

	f = open(G + '_codex.txt','w')
	f.write(str(codex))
	f.close()
